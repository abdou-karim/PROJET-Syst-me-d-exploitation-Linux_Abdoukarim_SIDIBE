#!/bin/bash
addDocument() {
     echo -e "${BLUE}╔══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
     echo -e "${BLUE}║                                   ${GREEN}Add new documents to the library${BLUE}                                   ║${NC}"
     echo -e "${BLUE}╠══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
    echo "Enter the full path of the document you want to add:"
    read new_document_path

    # Vérifie si le document existe
    if [ ! -f "$new_document_path" ]; then
        echo "The document does not exist."
        sleep 2
        addDocument
        return
    fi

    # Récupère le nom du fichier
    new_document_name=$(basename "$new_document_path")

    # Vérifie si le document existe déjà dans la bibliothèque
    if [ -f "$DOCUMENTS_DIR/$new_document_name" ]; then
        echo "The document already exists in the library."
        sleep 2
        addDocument
        return
    fi

    # Copie le document dans le répertoire de la bibliothèque
    cp "$new_document_path" "$DOCUMENTS_DIR"
    echo "The document \"$new_document_name\" has been added to the library."
    sleep 2
    showLibrary
}

addDocumentsFromDirectory() {
    clear
         echo -e "${BLUE}╔══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
         echo -e "${BLUE}║                                   ${GREEN}Adding documents from a directory${BLUE}                                   ║${NC}"
         echo -e "${BLUE}╠══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
    echo "Enter the full path of the directory containing the documents to add :"
    read directory_path

    # Vérifie si le répertoire existe
    if [ ! -d "$directory_path" ]; then
        echo "Directory does not exist."
        sleep 2
        showLibrary
        return
    fi

    # Liste tous les fichiers dans le répertoire
    files_in_directory=("$directory_path"/*)

    # Vérifie s'il y a des fichiers dans le répertoire
    if [ ${#files_in_directory[@]} -eq 0 ]; then
        echo "No documents found in directory."
        sleep 2
        showLibrary
        return
    fi

    # Copie tous les documents du répertoire dans le répertoire de la bibliothèque
    for file_path in "${files_in_directory[@]}"; do
        if [ -f "$file_path" ]; then
            filename=$(basename "$file_path")
            # Vérifie si le document existe déjà dans la bibliothèque
            if [ ! -f "$DOCUMENTS_DIR/$filename" ]; then
                cp "$file_path" "$DOCUMENTS_DIR"
                echo "The document \"$filename\" has been added to the library.."
            else
                echo "Document \"$filename\" already exists in the library."
            fi
        fi
    done
    echo
    sleep 2
    showLibrary

}

removeDocument() {
        echo -e "${BLUE}╔══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
        echo -e "${BLUE}║                                   ${GREEN}Delete a document from the library${BLUE}                                   ║${NC}"
        echo -e "${BLUE}╠══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
    echo "Enter the document number you want to delete :"
    read document_number

    # Vérifie si le numéro de document est un nombre
    if ! [[ $document_number =~ ^[0-9]+$ ]]; then
        echo "Please enter a valid document number."
        sleep 2
        removeDocument
        return
    fi

    # Vérifie si le numéro de document est dans la plage valide
    if [ $document_number -le 0 ] || [ $document_number -gt ${#files[@]} ]; then
        echo "The document number is invalid."
             sleep 2
            removeDocument
        return
    fi

    # Récupère le chemin complet du document
    document_path="${files[$((document_number - 1))]}"

    # Récupère le nom du fichier
    document_name=$(basename "$document_path")

    # Confirme la suppression
    echo "Are you sure you want to delete\"$document_name\" rom library? (o/N)"
    read confirm
    confirm=$(echo "$confirm" | tr '[:upper:]' '[:lower:]')
    if [ "$confirm" = "o" ]; then

        rm "$document_path"
        for ((i=0; i<15; i++)); do
            echo -n "#"
            sleep 0.5
        done
        echo
        echo "The document \"$document_name\" has been deleted from the library."
        sleep 3
        showLibrary
    else
        echo "The deletion was canceled."
    fi
    sleep 2
    showLibrary
}

renameDocument() {
    echo "Enter the document number you want to rename:"
    read document_number

    # Vérifie si le numéro de document est un nombre
    if ! [[ $document_number =~ ^[0-9]+$ ]]; then
              for ((i=0; i<7; i++)); do
                     echo -n "#"
                     sleep 0.2
                 done
                 echo
        echo "Please enter a valid document number."
        sleep 2
        renameDocument
        return
    fi

    # Vérifie si le numéro de document est dans la plage valide
    if [ $document_number -le 0 ] || [ $document_number -gt ${#files[@]} ]; then
                    for ((i=0; i<7; i++)); do
                           echo -n "#"
                           sleep 0.2
                       done
                       echo
        echo "The document number is invalid."
        sleep 2
        renameDocument
        return
    fi

    # Récupère le chemin complet du document
    document_path="${files[$((document_number - 1))]}"

    # Récupère le nom du fichier
    old_document_name=$(basename "$document_path")

    echo "Enter the new name for \"$old_document_name\" :"
    read new_document_name

    # Vérifie si le nouveau nom est vide
    if [ -z "$new_document_name" ]; then
        echo "New name cannot be empty."
        sleep 2
        renameDocument
        return
    fi

    # Vérifie si le nouveau nom existe déjà dans la bibliothèque
    if [ -f "$DOCUMENTS_DIR/$new_document_name" ]; then
                    for ((i=0; i<7; i++)); do
                           echo -n "#"
                           sleep 0.2
                       done
                       echo
        echo "The document \"$new_document_name\" already exists in the library."
        sleep 2
        renameDocument
        return
    fi

    # Renomme le document
    mv "$document_path" "$DOCUMENTS_DIR/$new_document_name"
                  for ((i=0; i<7; i++)); do
                         echo -n "#"
                         sleep 0.1
                     done
                     echo
    echo "The document \"$old_document_name\" was renamed to \"$new_document_name\"."
    sleep 2
    clear
    showLibrary
}

editDocument() {
    local max_attempts=3
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        echo "Enter the document number you want to edit:"
        read document_number

        # Vérifie si le numéro de document est un nombre
        if ! [[ $document_number =~ ^[0-9]+$ ]]; then
            echo "Please enter a valid document number."
            sleep 2
            ((attempt++))
            continue
        fi

        # Vérifie si le numéro de document est dans la plage valide
        if [ $document_number -le 0 ] || [ $document_number -gt ${#files[@]} ]; then
            echo "The document number is invalid."
            sleep 2
            ((attempt++))
            continue
        fi

        # Récupère le chemin complet du document
        document_path="${files[$((document_number - 1))]}"

        # Vérifie si le document est un fichier texte
        if ! file --mime-type "$document_path" | grep -q "text/plain"; then
            echo "This document is not a text file and cannot be edited."
            sleep 2
            ((attempt++))
            continue
        fi

        echo "Enter your username :"
        read username

        echo "Enter your password :"
        read -s password

        # Vérification des informations d'identification dans le fichier des utilisateurs
        while IFS=: read -r user email pass1 pass2 role; do
            if [ "$user" = "$username" ] && [ "$pass1" = "$password" ] && [ "$role" = "ADMIN" ]; then
                chmod u+x "$document_path"
                nano "$document_path"
                return
            fi
        done < /home/ak-sidibe/Workspace/3_Dev/UNCHK/Syteme_dexploitation/research_library/src/main/shellScript/dataBaseUsers.txt

        echo "Incorrect username, password, or administrator role. Please try again."
        sleep 2
        ((attempt++))
    done

    echo "Maximum number of attempts reached. Exiting."
}

search_files() {
    read -p "$(echo -e "${YELLOW}Enter the search keyword! : ${NC}")" -r keywords

    directory="/home/ak-sidibe/Documents/UNCHK_LIBRARY/"

    # Effectuer la recherche et afficher les résultats
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                                                         ${GREEN}Result for search${BLUE}                                                                           ║${NC}"
    echo -e "${BLUE}╠══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣${NC}"
    index=1
    find "$directory" -type f -iname "*$keywords*" 2>/dev/null | while IFS= read -r file; do
        filename=$(basename "$file")
        echo -e "${YELLOW}$index.${NC} ${filename//_/ }"
        index=$((index + 1))
    done
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
    sleep 3
    search_files
}
filter_documents() {

    # Répertoire contenant les documents
    directory="/home/ak-sidibe/Documents/UNCHK_LIBRARY"

    # Demander à l'utilisateur de saisir les critères de filtrage
    read -p "$(echo -e "${YELLOW}Entrez le sujet : ${NC}")" -r subject
    read -p "$(echo -e "${YELLOW}Entrez la catégorie : ${NC}")" -r category

    # Effectuer le filtrage des documents
    filtered_files=$(find "$directory" -type f -name "*.pdf" -printf '%T@ %p\n' | \
         grep "$subject" | grep "$category" | sort -nr | cut -d ' ' -f2-)

    # Vérifier si des documents ont été trouvés
    if [ -z "$filtered_files" ]; then
        echo -e "${RED}Aucun document trouvé correspondant aux critères de filtrage.${NC}"
        echo
        sleep 2
        filter_documents
    else
        # Afficher les documents filtrés
        echo -e "${BLUE}╔══════════════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║          ${GREEN}Documents Filtrés${BLUE}                        ║${NC}"
        echo -e "${BLUE}╚══════════════════════════════════════════════════╝${NC}"
        echo -e "${YELLOW}${filtered_files//_/}"


    fi
}

updateDocument(){
          echo -e "${BLUE}╔══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
          echo -e "${BLUE}║                                   ${GREEN}Editing a document${BLUE}                                   ║${NC}"
          echo -e "${BLUE}╠══════════════════════════════════════════════════════════════════════════════════════════════════════${NC}"
          echo -e "${BLUE}║ ${YELLOW}Menu :1) Change document Title\t║ 2) Modify a text file\t║Exit${NC}"
         read -p "$(echo -e "${YELLOW}Please choose an option : ${NC}")" -r choice
          case $choice in
              1) renameDocument ;;
              2) editDocument ;;
              3) exit ;;
              *) echo -e "${RED}Invalid choice.${NC}" && sleep 2 && updateDocumen ;;
          esac
}
